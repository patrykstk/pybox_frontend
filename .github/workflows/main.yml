on: [push]
name: build_push_and_deploy_to_aks

jobs:
  build_and_push_docker:
    runs-on: ubuntu-latest
    outputs:
      image_sha: ${{ steps.set_image.outputs.image_sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        id: set_image
        run: |
          IMAGE_SHA=${{ github.sha }}
          IMAGE=${{ secrets.REGISTRY_LOGIN_SERVER }}/nextjs-docker:$IMAGE_SHA
          docker build -f Dockerfile.bun -t $IMAGE -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/nextjs-docker:latest .
          docker push $IMAGE
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/nextjs-docker:latest
          echo "image_sha=$IMAGE_SHA" >> $GITHUB_OUTPUT

  deploy_aks:
    runs-on: ubuntu-latest
    needs: build_and_push_docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install kubectl
        run: az aks install-cli

      - name: Set AKS context
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Deploy updated image to AKS
        shell: bash {0}
        run: |
          NAMESPACE=default
          DEPLOYMENT=nextjs-deployment
          CONTAINER_NAME=nextjs-docker
          IMAGE=${{ secrets.REGISTRY_LOGIN_SERVER }}/nextjs-docker:${{ needs.build_and_push_docker.outputs.image_sha }}

          echo "Using existing service: pybox-frontend"
          echo "Updating deployment: $DEPLOYMENT"

          # Upewnij się, że deployment istnieje
          if kubectl get deployment $DEPLOYMENT -n $NAMESPACE >/dev/null 2>&1; then
            kubectl set image deployment/$DEPLOYMENT $CONTAINER_NAME=$IMAGE -n $NAMESPACE

            kubectl rollout status deployment/$DEPLOYMENT -n $NAMESPACE --timeout=3m

            echo " Deployment updated successfully and connected to existing Service pybox-frontend"
          else
            echo "Deployment '$DEPLOYMENT' not found in namespace '$NAMESPACE'."
            exit 1
          fi