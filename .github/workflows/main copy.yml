on: [push]

name: push_to_acr_and_deploy_to_aks

jobs:
  build_docker:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - name: 'Login to ACR'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: 'Build and push image with SHA and latest tags'
        run: |
          docker build -f Dockerfile.bun -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/nextjs-docker:${{ github.sha }} -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/nextjs-docker:latest .
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/nextjs-docker:${{ github.sha }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/nextjs-docker:latest

      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Setup kubectl
        run: |
          az aks install-cli

      - name: 'Set AKS context'
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: 'Deploy or update AKS deployment'
        run: |
          set -e
          NAMESPACE=default
          DEPLOYMENT=nextjs-deployment
          IMAGE=${{ secrets.REGISTRY_LOGIN_SERVER }}/nextjs-docker:${{ github.sha }}

          # Sprawdzenie czy deployment istnieje
          if kubectl get deployment $DEPLOYMENT -n $NAMESPACE >/dev/null 2>&1; then
            echo "Deployment exists, updating image..."
            kubectl set image deployment/$DEPLOYMENT nextjs-container=$IMAGE -n $NAMESPACE
            kubectl rollout status deployment/$DEPLOYMENT -n $NAMESPACE --timeout=3m
          else
            echo "Deployment does not exist, creating deployment dynamically..."
            mkdir -p k8s
            # Generowanie Deployment
            kubectl create deployment $DEPLOYMENT \
              --image=$IMAGE \
              --replicas=2 \
              --dry-run=client -o yaml > k8s/deployment.yaml
            # Generowanie Service typu LoadBalancer
            kubectl expose deployment $DEPLOYMENT \
              --type=LoadBalancer \
              --port=80 \
              --target-port=3000 \
              --dry-run=client -o yaml >> k8s/deployment.yaml
            # Apply do klastra
            kubectl apply -f k8s/deployment.yaml -n $NAMESPACE
          fi
